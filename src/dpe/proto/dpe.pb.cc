// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dpe.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dpe.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dpe {
class VariantDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Variant> {
  public:
  ::google::protobuf::int64 value_int64_;
  ::google::protobuf::internal::ArenaStringPtr value_string_;
} _Variant_default_instance_;
class VariantsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Variants> {
} _Variants_default_instance_;
class ConnectRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConnectRequest> {
} _ConnectRequest_default_instance_;
class ConnectResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConnectResponse> {
} _ConnectResponse_default_instance_;
class DisconnectRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DisconnectRequest> {
} _DisconnectRequest_default_instance_;
class ComputeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ComputeRequest> {
} _ComputeRequest_default_instance_;
class FinishComputeRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FinishComputeRequest> {
} _FinishComputeRequest_default_instance_;
class UpdateWorkerStatusRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UpdateWorkerStatusRequest> {
} _UpdateWorkerStatusRequest_default_instance_;
class RequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Request> {
} _Request_default_instance_;
class ResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Response> {
} _Response_default_instance_;

namespace protobuf_dpe_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variant, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variant, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variant, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Variant_default_instance_), value_int64_),
  GOOGLE_PROTOBUF_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_Variant_default_instance_), value_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variant, value_),
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variants, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variants, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variants, element_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectRequest, address_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectResponse, connection_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DisconnectRequest, address_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputeRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComputeRequest, task_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishComputeRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishComputeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishComputeRequest, task_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishComputeRequest, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishComputeRequest, time_usage_),
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWorkerStatusRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWorkerStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWorkerStatusRequest, running_task_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, connection_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, connect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, disconnect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, compute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, finish_compute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, update_worker_status_),
  0,
  6,
  7,
  8,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, request_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, connect_),
  0,
  2,
  3,
  4,
  5,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(Variant)},
  { 10, 16, sizeof(Variants)},
  { 17, 23, sizeof(ConnectRequest)},
  { 24, 30, sizeof(ConnectResponse)},
  { 31, 37, sizeof(DisconnectRequest)},
  { 38, 44, sizeof(ComputeRequest)},
  { 45, 53, sizeof(FinishComputeRequest)},
  { 56, 62, sizeof(UpdateWorkerStatusRequest)},
  { 63, 77, sizeof(Request)},
  { 86, 97, sizeof(Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Variant_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Variants_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConnectRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConnectResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DisconnectRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ComputeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FinishComputeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UpdateWorkerStatusRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Response_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dpe.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace

void TableStruct::Shutdown() {
  _Variant_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Variants_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ConnectRequest_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ConnectResponse_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _DisconnectRequest_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _ComputeRequest_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _FinishComputeRequest_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _UpdateWorkerStatusRequest_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _Request_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Response_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Variant_default_instance_.DefaultConstruct();
  _Variants_default_instance_.DefaultConstruct();
  _ConnectRequest_default_instance_.DefaultConstruct();
  _ConnectResponse_default_instance_.DefaultConstruct();
  _DisconnectRequest_default_instance_.DefaultConstruct();
  _ComputeRequest_default_instance_.DefaultConstruct();
  _FinishComputeRequest_default_instance_.DefaultConstruct();
  _UpdateWorkerStatusRequest_default_instance_.DefaultConstruct();
  _Request_default_instance_.DefaultConstruct();
  _Response_default_instance_.DefaultConstruct();
  _Variant_default_instance_.value_int64_ = GOOGLE_LONGLONG(0);
  _Variant_default_instance_.value_string_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _FinishComputeRequest_default_instance_.get_mutable()->result_ = const_cast< ::dpe::Variants*>(
      ::dpe::Variants::internal_default_instance());
  _Request_default_instance_.get_mutable()->connect_ = const_cast< ::dpe::ConnectRequest*>(
      ::dpe::ConnectRequest::internal_default_instance());
  _Request_default_instance_.get_mutable()->disconnect_ = const_cast< ::dpe::DisconnectRequest*>(
      ::dpe::DisconnectRequest::internal_default_instance());
  _Request_default_instance_.get_mutable()->compute_ = const_cast< ::dpe::ComputeRequest*>(
      ::dpe::ComputeRequest::internal_default_instance());
  _Request_default_instance_.get_mutable()->finish_compute_ = const_cast< ::dpe::FinishComputeRequest*>(
      ::dpe::FinishComputeRequest::internal_default_instance());
  _Request_default_instance_.get_mutable()->update_worker_status_ = const_cast< ::dpe::UpdateWorkerStatusRequest*>(
      ::dpe::UpdateWorkerStatusRequest::internal_default_instance());
  _Response_default_instance_.get_mutable()->connect_ = const_cast< ::dpe::ConnectResponse*>(
      ::dpe::ConnectResponse::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\tdpe.proto\022\003dpe\"A\n\007Variant\022\025\n\013value_int"
      "64\030\001 \001(\003H\000\022\026\n\014value_string\030\002 \001(\tH\000B\007\n\005va"
      "lue\")\n\010Variants\022\035\n\007element\030\001 \003(\0132\014.dpe.V"
      "ariant\"!\n\016ConnectRequest\022\017\n\007address\030\001 \001("
      "\t\"(\n\017ConnectResponse\022\025\n\rconnection_id\030\001 "
      "\001(\003\"$\n\021DisconnectRequest\022\017\n\007address\030\001 \001("
      "\t\"!\n\016ComputeRequest\022\017\n\007task_id\030\001 \001(\003\"]\n\024"
      "FinishComputeRequest\022\017\n\007task_id\030\001 \001(\003\022\035\n"
      "\006result\030\002 \001(\0132\r.dpe.Variants\022\025\n\ntime_usa"
      "ge\030\003 \001(\003:\0010\"4\n\031UpdateWorkerStatusRequest"
      "\022\027\n\017running_task_id\030\001 \001(\003\"\314\002\n\007Request\022\014\n"
      "\004name\030\001 \001(\t\022\030\n\rconnection_id\030\002 \001(\003:\0010\022\025\n"
      "\nrequest_id\030\003 \001(\003:\0010\022\024\n\ttimestamp\030d \001(\003:"
      "\0010\022%\n\007connect\030\254\002 \001(\0132\023.dpe.ConnectReques"
      "t\022+\n\ndisconnect\030\255\002 \001(\0132\026.dpe.DisconnectR"
      "equest\022%\n\007compute\030\256\002 \001(\0132\023.dpe.ComputeRe"
      "quest\0222\n\016finish_compute\030\257\002 \001(\0132\031.dpe.Fin"
      "ishComputeRequest\022=\n\024update_worker_statu"
      "s\030\260\002 \001(\0132\036.dpe.UpdateWorkerStatusRequest"
      "\"\241\001\n\010Response\022\014\n\004name\030\001 \001(\t\022\022\n\nerror_cod"
      "e\030\002 \001(\003\022\024\n\ttimestamp\030d \001(\003:\0010\022\035\n\021request"
      "_timestamp\030\310\001 \001(\003:\0010\022\026\n\nrequest_id\030\311\001 \001("
      "\003:\0010\022&\n\007connect\030\254\002 \001(\0132\024.dpe.ConnectResp"
      "onse"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 924);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dpe.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dpe_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Variant::kValueInt64FieldNumber;
const int Variant::kValueStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Variant::Variant()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dpe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dpe.Variant)
}
Variant::Variant(const Variant& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kValueInt64: {
      set_value_int64(from.value_int64());
      break;
    }
    case kValueString: {
      set_value_string(from.value_string());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dpe.Variant)
}

void Variant::SharedCtor() {
  _cached_size_ = 0;
  clear_has_value();
}

Variant::~Variant() {
  // @@protoc_insertion_point(destructor:dpe.Variant)
  SharedDtor();
}

void Variant::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void Variant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Variant::descriptor() {
  protobuf_dpe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dpe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Variant& Variant::default_instance() {
  protobuf_dpe_2eproto::InitDefaults();
  return *internal_default_instance();
}

Variant* Variant::New(::google::protobuf::Arena* arena) const {
  Variant* n = new Variant;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Variant::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:dpe.Variant)
  switch (value_case()) {
    case kValueInt64: {
      // No need to clear
      break;
    }
    case kValueString: {
      value_.value_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Variant::Clear() {
// @@protoc_insertion_point(message_clear_start:dpe.Variant)
  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Variant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dpe.Variant)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 value_int64 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_.value_int64_)));
          set_has_value_int64();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value_string = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value_string().data(), this->value_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dpe.Variant.value_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dpe.Variant)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dpe.Variant)
  return false;
#undef DO_
}

void Variant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dpe.Variant)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (value_case()) {
    case kValueInt64:
      ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->value_int64(), output);
      break;
    case kValueString:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->value_string().data(), this->value_string().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "dpe.Variant.value_string");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        2, this->value_string(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dpe.Variant)
}

::google::protobuf::uint8* Variant::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dpe.Variant)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (value_case()) {
    case kValueInt64:
      target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->value_int64(), target);
      break;
    case kValueString:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->value_string().data(), this->value_string().length(),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "dpe.Variant.value_string");
      target =
        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
          2, this->value_string(), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dpe.Variant)
  return target;
}

size_t Variant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dpe.Variant)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  switch (value_case()) {
    // optional int64 value_int64 = 1;
    case kValueInt64: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value_int64());
      break;
    }
    // optional string value_string = 2;
    case kValueString: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value_string());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Variant::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dpe.Variant)
  GOOGLE_DCHECK_NE(&from, this);
  const Variant* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Variant>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dpe.Variant)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dpe.Variant)
    MergeFrom(*source);
  }
}

void Variant::MergeFrom(const Variant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dpe.Variant)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kValueInt64: {
      set_value_int64(from.value_int64());
      break;
    }
    case kValueString: {
      set_value_string(from.value_string());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Variant::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dpe.Variant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Variant::CopyFrom(const Variant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dpe.Variant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Variant::IsInitialized() const {
  return true;
}

void Variant::Swap(Variant* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Variant::InternalSwap(Variant* other) {
  std::swap(value_, other->value_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Variant::GetMetadata() const {
  protobuf_dpe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dpe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Variant

// optional int64 value_int64 = 1;
bool Variant::has_value_int64() const {
  return value_case() == kValueInt64;
}
void Variant::set_has_value_int64() {
  _oneof_case_[0] = kValueInt64;
}
void Variant::clear_value_int64() {
  if (has_value_int64()) {
    value_.value_int64_ = GOOGLE_LONGLONG(0);
    clear_has_value();
  }
}
::google::protobuf::int64 Variant::value_int64() const {
  // @@protoc_insertion_point(field_get:dpe.Variant.value_int64)
  if (has_value_int64()) {
    return value_.value_int64_;
  }
  return GOOGLE_LONGLONG(0);
}
void Variant::set_value_int64(::google::protobuf::int64 value) {
  if (!has_value_int64()) {
    clear_value();
    set_has_value_int64();
  }
  value_.value_int64_ = value;
  // @@protoc_insertion_point(field_set:dpe.Variant.value_int64)
}

// optional string value_string = 2;
bool Variant::has_value_string() const {
  return value_case() == kValueString;
}
void Variant::set_has_value_string() {
  _oneof_case_[0] = kValueString;
}
void Variant::clear_value_string() {
  if (has_value_string()) {
    value_.value_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
const ::std::string& Variant::value_string() const {
  // @@protoc_insertion_point(field_get:dpe.Variant.value_string)
  if (has_value_string()) {
    return value_.value_string_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
void Variant::set_value_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dpe.Variant.value_string)
  if (!has_value_string()) {
    clear_value();
    set_has_value_string();
    value_.value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.value_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dpe.Variant.value_string)
}
#if LANG_CXX11
void Variant::set_value_string(::std::string&& value) {
  // @@protoc_insertion_point(field_set:dpe.Variant.value_string)
  if (!has_value_string()) {
    clear_value();
    set_has_value_string();
    value_.value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.value_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dpe.Variant.value_string)
}
#endif
void Variant::set_value_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_value_string()) {
    clear_value();
    set_has_value_string();
    value_.value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.value_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dpe.Variant.value_string)
}
void Variant::set_value_string(const char* value, size_t size) {
  if (!has_value_string()) {
    clear_value();
    set_has_value_string();
    value_.value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.value_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dpe.Variant.value_string)
}
::std::string* Variant::mutable_value_string() {
  if (!has_value_string()) {
    clear_value();
    set_has_value_string();
    value_.value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:dpe.Variant.value_string)
  return value_.value_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Variant::release_value_string() {
  // @@protoc_insertion_point(field_release:dpe.Variant.value_string)
  if (has_value_string()) {
    clear_has_value();
    return value_.value_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
void Variant::set_allocated_value_string(::std::string* value_string) {
  if (!has_value_string()) {
    value_.value_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (value_string != NULL) {
    set_has_value_string();
    value_.value_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        value_string);
  }
  // @@protoc_insertion_point(field_set_allocated:dpe.Variant.value_string)
}

bool Variant::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
void Variant::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
Variant::ValueCase Variant::value_case() const {
  return Variant::ValueCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Variants::kElementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Variants::Variants()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dpe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dpe.Variants)
}
Variants::Variants(const Variants& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      element_(from.element_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dpe.Variants)
}

void Variants::SharedCtor() {
  _cached_size_ = 0;
}

Variants::~Variants() {
  // @@protoc_insertion_point(destructor:dpe.Variants)
  SharedDtor();
}

void Variants::SharedDtor() {
}

void Variants::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Variants::descriptor() {
  protobuf_dpe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dpe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Variants& Variants::default_instance() {
  protobuf_dpe_2eproto::InitDefaults();
  return *internal_default_instance();
}

Variants* Variants::New(::google::protobuf::Arena* arena) const {
  Variants* n = new Variants;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Variants::Clear() {
// @@protoc_insertion_point(message_clear_start:dpe.Variants)
  element_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Variants::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dpe.Variants)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dpe.Variant element = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_element()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dpe.Variants)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dpe.Variants)
  return false;
#undef DO_
}

void Variants::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dpe.Variants)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dpe.Variant element = 1;
  for (unsigned int i = 0, n = this->element_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->element(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dpe.Variants)
}

::google::protobuf::uint8* Variants::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dpe.Variants)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dpe.Variant element = 1;
  for (unsigned int i = 0, n = this->element_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->element(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dpe.Variants)
  return target;
}

size_t Variants::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dpe.Variants)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .dpe.Variant element = 1;
  {
    unsigned int count = this->element_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->element(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Variants::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dpe.Variants)
  GOOGLE_DCHECK_NE(&from, this);
  const Variants* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Variants>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dpe.Variants)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dpe.Variants)
    MergeFrom(*source);
  }
}

void Variants::MergeFrom(const Variants& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dpe.Variants)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_.MergeFrom(from.element_);
}

void Variants::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dpe.Variants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Variants::CopyFrom(const Variants& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dpe.Variants)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Variants::IsInitialized() const {
  return true;
}

void Variants::Swap(Variants* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Variants::InternalSwap(Variants* other) {
  element_.InternalSwap(&other->element_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Variants::GetMetadata() const {
  protobuf_dpe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dpe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Variants

// repeated .dpe.Variant element = 1;
int Variants::element_size() const {
  return element_.size();
}
void Variants::clear_element() {
  element_.Clear();
}
const ::dpe::Variant& Variants::element(int index) const {
  // @@protoc_insertion_point(field_get:dpe.Variants.element)
  return element_.Get(index);
}
::dpe::Variant* Variants::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:dpe.Variants.element)
  return element_.Mutable(index);
}
::dpe::Variant* Variants::add_element() {
  // @@protoc_insertion_point(field_add:dpe.Variants.element)
  return element_.Add();
}
::google::protobuf::RepeatedPtrField< ::dpe::Variant >*
Variants::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:dpe.Variants.element)
  return &element_;
}
const ::google::protobuf::RepeatedPtrField< ::dpe::Variant >&
Variants::element() const {
  // @@protoc_insertion_point(field_list:dpe.Variants.element)
  return element_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectRequest::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectRequest::ConnectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dpe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dpe.ConnectRequest)
}
ConnectRequest::ConnectRequest(const ConnectRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:dpe.ConnectRequest)
}

void ConnectRequest::SharedCtor() {
  _cached_size_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ConnectRequest::~ConnectRequest() {
  // @@protoc_insertion_point(destructor:dpe.ConnectRequest)
  SharedDtor();
}

void ConnectRequest::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectRequest::descriptor() {
  protobuf_dpe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dpe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConnectRequest& ConnectRequest::default_instance() {
  protobuf_dpe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConnectRequest* ConnectRequest::New(::google::protobuf::Arena* arena) const {
  ConnectRequest* n = new ConnectRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dpe.ConnectRequest)
  if (has_address()) {
    GOOGLE_DCHECK(!address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*address_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dpe.ConnectRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dpe.ConnectRequest.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dpe.ConnectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dpe.ConnectRequest)
  return false;
#undef DO_
}

void ConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dpe.ConnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dpe.ConnectRequest.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dpe.ConnectRequest)
}

::google::protobuf::uint8* ConnectRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dpe.ConnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dpe.ConnectRequest.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dpe.ConnectRequest)
  return target;
}

size_t ConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dpe.ConnectRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string address = 1;
  if (has_address()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dpe.ConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dpe.ConnectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dpe.ConnectRequest)
    MergeFrom(*source);
  }
}

void ConnectRequest::MergeFrom(const ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dpe.ConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_address()) {
    set_has_address();
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void ConnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dpe.ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRequest::CopyFrom(const ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dpe.ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRequest::IsInitialized() const {
  return true;
}

void ConnectRequest::Swap(ConnectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectRequest::InternalSwap(ConnectRequest* other) {
  address_.Swap(&other->address_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectRequest::GetMetadata() const {
  protobuf_dpe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dpe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectRequest

// optional string address = 1;
bool ConnectRequest::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConnectRequest::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
void ConnectRequest::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConnectRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
const ::std::string& ConnectRequest::address() const {
  // @@protoc_insertion_point(field_get:dpe.ConnectRequest.address)
  return address_.GetNoArena();
}
void ConnectRequest::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dpe.ConnectRequest.address)
}
#if LANG_CXX11
void ConnectRequest::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dpe.ConnectRequest.address)
}
#endif
void ConnectRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dpe.ConnectRequest.address)
}
void ConnectRequest::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dpe.ConnectRequest.address)
}
::std::string* ConnectRequest::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:dpe.ConnectRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectRequest::release_address() {
  // @@protoc_insertion_point(field_release:dpe.ConnectRequest.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:dpe.ConnectRequest.address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectResponse::kConnectionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectResponse::ConnectResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dpe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dpe.ConnectResponse)
}
ConnectResponse::ConnectResponse(const ConnectResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connection_id_ = from.connection_id_;
  // @@protoc_insertion_point(copy_constructor:dpe.ConnectResponse)
}

void ConnectResponse::SharedCtor() {
  _cached_size_ = 0;
  connection_id_ = GOOGLE_LONGLONG(0);
}

ConnectResponse::~ConnectResponse() {
  // @@protoc_insertion_point(destructor:dpe.ConnectResponse)
  SharedDtor();
}

void ConnectResponse::SharedDtor() {
}

void ConnectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectResponse::descriptor() {
  protobuf_dpe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dpe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConnectResponse& ConnectResponse::default_instance() {
  protobuf_dpe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConnectResponse* ConnectResponse::New(::google::protobuf::Arena* arena) const {
  ConnectResponse* n = new ConnectResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dpe.ConnectResponse)
  connection_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConnectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dpe.ConnectResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 connection_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dpe.ConnectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dpe.ConnectResponse)
  return false;
#undef DO_
}

void ConnectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dpe.ConnectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 connection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->connection_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dpe.ConnectResponse)
}

::google::protobuf::uint8* ConnectResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dpe.ConnectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 connection_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->connection_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dpe.ConnectResponse)
  return target;
}

size_t ConnectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dpe.ConnectResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int64 connection_id = 1;
  if (has_connection_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->connection_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dpe.ConnectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dpe.ConnectResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dpe.ConnectResponse)
    MergeFrom(*source);
  }
}

void ConnectResponse::MergeFrom(const ConnectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dpe.ConnectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_connection_id()) {
    set_connection_id(from.connection_id());
  }
}

void ConnectResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dpe.ConnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectResponse::CopyFrom(const ConnectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dpe.ConnectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectResponse::IsInitialized() const {
  return true;
}

void ConnectResponse::Swap(ConnectResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectResponse::InternalSwap(ConnectResponse* other) {
  std::swap(connection_id_, other->connection_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectResponse::GetMetadata() const {
  protobuf_dpe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dpe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectResponse

// optional int64 connection_id = 1;
bool ConnectResponse::has_connection_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConnectResponse::set_has_connection_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ConnectResponse::clear_has_connection_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConnectResponse::clear_connection_id() {
  connection_id_ = GOOGLE_LONGLONG(0);
  clear_has_connection_id();
}
::google::protobuf::int64 ConnectResponse::connection_id() const {
  // @@protoc_insertion_point(field_get:dpe.ConnectResponse.connection_id)
  return connection_id_;
}
void ConnectResponse::set_connection_id(::google::protobuf::int64 value) {
  set_has_connection_id();
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:dpe.ConnectResponse.connection_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DisconnectRequest::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DisconnectRequest::DisconnectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dpe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dpe.DisconnectRequest)
}
DisconnectRequest::DisconnectRequest(const DisconnectRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:dpe.DisconnectRequest)
}

void DisconnectRequest::SharedCtor() {
  _cached_size_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DisconnectRequest::~DisconnectRequest() {
  // @@protoc_insertion_point(destructor:dpe.DisconnectRequest)
  SharedDtor();
}

void DisconnectRequest::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DisconnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DisconnectRequest::descriptor() {
  protobuf_dpe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dpe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DisconnectRequest& DisconnectRequest::default_instance() {
  protobuf_dpe_2eproto::InitDefaults();
  return *internal_default_instance();
}

DisconnectRequest* DisconnectRequest::New(::google::protobuf::Arena* arena) const {
  DisconnectRequest* n = new DisconnectRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DisconnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dpe.DisconnectRequest)
  if (has_address()) {
    GOOGLE_DCHECK(!address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*address_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DisconnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dpe.DisconnectRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dpe.DisconnectRequest.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dpe.DisconnectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dpe.DisconnectRequest)
  return false;
#undef DO_
}

void DisconnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dpe.DisconnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dpe.DisconnectRequest.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dpe.DisconnectRequest)
}

::google::protobuf::uint8* DisconnectRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dpe.DisconnectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string address = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dpe.DisconnectRequest.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dpe.DisconnectRequest)
  return target;
}

size_t DisconnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dpe.DisconnectRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional string address = 1;
  if (has_address()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DisconnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dpe.DisconnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DisconnectRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DisconnectRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dpe.DisconnectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dpe.DisconnectRequest)
    MergeFrom(*source);
  }
}

void DisconnectRequest::MergeFrom(const DisconnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dpe.DisconnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_address()) {
    set_has_address();
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void DisconnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dpe.DisconnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisconnectRequest::CopyFrom(const DisconnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dpe.DisconnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectRequest::IsInitialized() const {
  return true;
}

void DisconnectRequest::Swap(DisconnectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DisconnectRequest::InternalSwap(DisconnectRequest* other) {
  address_.Swap(&other->address_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DisconnectRequest::GetMetadata() const {
  protobuf_dpe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dpe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DisconnectRequest

// optional string address = 1;
bool DisconnectRequest::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DisconnectRequest::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
void DisconnectRequest::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
void DisconnectRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
const ::std::string& DisconnectRequest::address() const {
  // @@protoc_insertion_point(field_get:dpe.DisconnectRequest.address)
  return address_.GetNoArena();
}
void DisconnectRequest::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dpe.DisconnectRequest.address)
}
#if LANG_CXX11
void DisconnectRequest::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dpe.DisconnectRequest.address)
}
#endif
void DisconnectRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dpe.DisconnectRequest.address)
}
void DisconnectRequest::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dpe.DisconnectRequest.address)
}
::std::string* DisconnectRequest::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:dpe.DisconnectRequest.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DisconnectRequest::release_address() {
  // @@protoc_insertion_point(field_release:dpe.DisconnectRequest.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DisconnectRequest::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:dpe.DisconnectRequest.address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ComputeRequest::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ComputeRequest::ComputeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dpe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dpe.ComputeRequest)
}
ComputeRequest::ComputeRequest(const ComputeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  task_id_ = from.task_id_;
  // @@protoc_insertion_point(copy_constructor:dpe.ComputeRequest)
}

void ComputeRequest::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = GOOGLE_LONGLONG(0);
}

ComputeRequest::~ComputeRequest() {
  // @@protoc_insertion_point(destructor:dpe.ComputeRequest)
  SharedDtor();
}

void ComputeRequest::SharedDtor() {
}

void ComputeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComputeRequest::descriptor() {
  protobuf_dpe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dpe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ComputeRequest& ComputeRequest::default_instance() {
  protobuf_dpe_2eproto::InitDefaults();
  return *internal_default_instance();
}

ComputeRequest* ComputeRequest::New(::google::protobuf::Arena* arena) const {
  ComputeRequest* n = new ComputeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ComputeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dpe.ComputeRequest)
  task_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ComputeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dpe.ComputeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 task_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_task_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dpe.ComputeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dpe.ComputeRequest)
  return false;
#undef DO_
}

void ComputeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dpe.ComputeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 task_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->task_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dpe.ComputeRequest)
}

::google::protobuf::uint8* ComputeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dpe.ComputeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 task_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->task_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dpe.ComputeRequest)
  return target;
}

size_t ComputeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dpe.ComputeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int64 task_id = 1;
  if (has_task_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->task_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComputeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dpe.ComputeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ComputeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ComputeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dpe.ComputeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dpe.ComputeRequest)
    MergeFrom(*source);
  }
}

void ComputeRequest::MergeFrom(const ComputeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dpe.ComputeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_task_id()) {
    set_task_id(from.task_id());
  }
}

void ComputeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dpe.ComputeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComputeRequest::CopyFrom(const ComputeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dpe.ComputeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComputeRequest::IsInitialized() const {
  return true;
}

void ComputeRequest::Swap(ComputeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ComputeRequest::InternalSwap(ComputeRequest* other) {
  std::swap(task_id_, other->task_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ComputeRequest::GetMetadata() const {
  protobuf_dpe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dpe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ComputeRequest

// optional int64 task_id = 1;
bool ComputeRequest::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ComputeRequest::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ComputeRequest::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ComputeRequest::clear_task_id() {
  task_id_ = GOOGLE_LONGLONG(0);
  clear_has_task_id();
}
::google::protobuf::int64 ComputeRequest::task_id() const {
  // @@protoc_insertion_point(field_get:dpe.ComputeRequest.task_id)
  return task_id_;
}
void ComputeRequest::set_task_id(::google::protobuf::int64 value) {
  set_has_task_id();
  task_id_ = value;
  // @@protoc_insertion_point(field_set:dpe.ComputeRequest.task_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FinishComputeRequest::kTaskIdFieldNumber;
const int FinishComputeRequest::kResultFieldNumber;
const int FinishComputeRequest::kTimeUsageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FinishComputeRequest::FinishComputeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dpe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dpe.FinishComputeRequest)
}
FinishComputeRequest::FinishComputeRequest(const FinishComputeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::dpe::Variants(*from.result_);
  } else {
    result_ = NULL;
  }
  ::memcpy(&task_id_, &from.task_id_,
    reinterpret_cast<char*>(&time_usage_) -
    reinterpret_cast<char*>(&task_id_) + sizeof(time_usage_));
  // @@protoc_insertion_point(copy_constructor:dpe.FinishComputeRequest)
}

void FinishComputeRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&result_, 0, reinterpret_cast<char*>(&time_usage_) -
    reinterpret_cast<char*>(&result_) + sizeof(time_usage_));
}

FinishComputeRequest::~FinishComputeRequest() {
  // @@protoc_insertion_point(destructor:dpe.FinishComputeRequest)
  SharedDtor();
}

void FinishComputeRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete result_;
  }
}

void FinishComputeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinishComputeRequest::descriptor() {
  protobuf_dpe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dpe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FinishComputeRequest& FinishComputeRequest::default_instance() {
  protobuf_dpe_2eproto::InitDefaults();
  return *internal_default_instance();
}

FinishComputeRequest* FinishComputeRequest::New(::google::protobuf::Arena* arena) const {
  FinishComputeRequest* n = new FinishComputeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FinishComputeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dpe.FinishComputeRequest)
  if (has_result()) {
    GOOGLE_DCHECK(result_ != NULL);
    result_->::dpe::Variants::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&task_id_, 0, reinterpret_cast<char*>(&time_usage_) -
      reinterpret_cast<char*>(&task_id_) + sizeof(time_usage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FinishComputeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dpe.FinishComputeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 task_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_task_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dpe.Variants result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 time_usage = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_time_usage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dpe.FinishComputeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dpe.FinishComputeRequest)
  return false;
#undef DO_
}

void FinishComputeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dpe.FinishComputeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 task_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->task_id(), output);
  }

  // optional .dpe.Variants result = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->result_, output);
  }

  // optional int64 time_usage = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time_usage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dpe.FinishComputeRequest)
}

::google::protobuf::uint8* FinishComputeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dpe.FinishComputeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 task_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->task_id(), target);
  }

  // optional .dpe.Variants result = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->result_, deterministic, target);
  }

  // optional int64 time_usage = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time_usage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dpe.FinishComputeRequest)
  return target;
}

size_t FinishComputeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dpe.FinishComputeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .dpe.Variants result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->result_);
    }

    // optional int64 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->task_id());
    }

    // optional int64 time_usage = 3 [default = 0];
    if (has_time_usage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time_usage());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinishComputeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dpe.FinishComputeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FinishComputeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FinishComputeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dpe.FinishComputeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dpe.FinishComputeRequest)
    MergeFrom(*source);
  }
}

void FinishComputeRequest::MergeFrom(const FinishComputeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dpe.FinishComputeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_result()->::dpe::Variants::MergeFrom(from.result());
    }
    if (cached_has_bits & 0x00000002u) {
      task_id_ = from.task_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_usage_ = from.time_usage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FinishComputeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dpe.FinishComputeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishComputeRequest::CopyFrom(const FinishComputeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dpe.FinishComputeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishComputeRequest::IsInitialized() const {
  return true;
}

void FinishComputeRequest::Swap(FinishComputeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FinishComputeRequest::InternalSwap(FinishComputeRequest* other) {
  std::swap(result_, other->result_);
  std::swap(task_id_, other->task_id_);
  std::swap(time_usage_, other->time_usage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FinishComputeRequest::GetMetadata() const {
  protobuf_dpe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dpe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FinishComputeRequest

// optional int64 task_id = 1;
bool FinishComputeRequest::has_task_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FinishComputeRequest::set_has_task_id() {
  _has_bits_[0] |= 0x00000002u;
}
void FinishComputeRequest::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void FinishComputeRequest::clear_task_id() {
  task_id_ = GOOGLE_LONGLONG(0);
  clear_has_task_id();
}
::google::protobuf::int64 FinishComputeRequest::task_id() const {
  // @@protoc_insertion_point(field_get:dpe.FinishComputeRequest.task_id)
  return task_id_;
}
void FinishComputeRequest::set_task_id(::google::protobuf::int64 value) {
  set_has_task_id();
  task_id_ = value;
  // @@protoc_insertion_point(field_set:dpe.FinishComputeRequest.task_id)
}

// optional .dpe.Variants result = 2;
bool FinishComputeRequest::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FinishComputeRequest::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void FinishComputeRequest::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void FinishComputeRequest::clear_result() {
  if (result_ != NULL) result_->::dpe::Variants::Clear();
  clear_has_result();
}
const ::dpe::Variants& FinishComputeRequest::result() const {
  // @@protoc_insertion_point(field_get:dpe.FinishComputeRequest.result)
  return result_ != NULL ? *result_
                         : *::dpe::Variants::internal_default_instance();
}
::dpe::Variants* FinishComputeRequest::mutable_result() {
  set_has_result();
  if (result_ == NULL) {
    result_ = new ::dpe::Variants;
  }
  // @@protoc_insertion_point(field_mutable:dpe.FinishComputeRequest.result)
  return result_;
}
::dpe::Variants* FinishComputeRequest::release_result() {
  // @@protoc_insertion_point(field_release:dpe.FinishComputeRequest.result)
  clear_has_result();
  ::dpe::Variants* temp = result_;
  result_ = NULL;
  return temp;
}
void FinishComputeRequest::set_allocated_result(::dpe::Variants* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:dpe.FinishComputeRequest.result)
}

// optional int64 time_usage = 3 [default = 0];
bool FinishComputeRequest::has_time_usage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FinishComputeRequest::set_has_time_usage() {
  _has_bits_[0] |= 0x00000004u;
}
void FinishComputeRequest::clear_has_time_usage() {
  _has_bits_[0] &= ~0x00000004u;
}
void FinishComputeRequest::clear_time_usage() {
  time_usage_ = GOOGLE_LONGLONG(0);
  clear_has_time_usage();
}
::google::protobuf::int64 FinishComputeRequest::time_usage() const {
  // @@protoc_insertion_point(field_get:dpe.FinishComputeRequest.time_usage)
  return time_usage_;
}
void FinishComputeRequest::set_time_usage(::google::protobuf::int64 value) {
  set_has_time_usage();
  time_usage_ = value;
  // @@protoc_insertion_point(field_set:dpe.FinishComputeRequest.time_usage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateWorkerStatusRequest::kRunningTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateWorkerStatusRequest::UpdateWorkerStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dpe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dpe.UpdateWorkerStatusRequest)
}
UpdateWorkerStatusRequest::UpdateWorkerStatusRequest(const UpdateWorkerStatusRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  running_task_id_ = from.running_task_id_;
  // @@protoc_insertion_point(copy_constructor:dpe.UpdateWorkerStatusRequest)
}

void UpdateWorkerStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  running_task_id_ = GOOGLE_LONGLONG(0);
}

UpdateWorkerStatusRequest::~UpdateWorkerStatusRequest() {
  // @@protoc_insertion_point(destructor:dpe.UpdateWorkerStatusRequest)
  SharedDtor();
}

void UpdateWorkerStatusRequest::SharedDtor() {
}

void UpdateWorkerStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateWorkerStatusRequest::descriptor() {
  protobuf_dpe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dpe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateWorkerStatusRequest& UpdateWorkerStatusRequest::default_instance() {
  protobuf_dpe_2eproto::InitDefaults();
  return *internal_default_instance();
}

UpdateWorkerStatusRequest* UpdateWorkerStatusRequest::New(::google::protobuf::Arena* arena) const {
  UpdateWorkerStatusRequest* n = new UpdateWorkerStatusRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpdateWorkerStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dpe.UpdateWorkerStatusRequest)
  running_task_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UpdateWorkerStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dpe.UpdateWorkerStatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 running_task_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_running_task_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &running_task_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dpe.UpdateWorkerStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dpe.UpdateWorkerStatusRequest)
  return false;
#undef DO_
}

void UpdateWorkerStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dpe.UpdateWorkerStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 running_task_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->running_task_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dpe.UpdateWorkerStatusRequest)
}

::google::protobuf::uint8* UpdateWorkerStatusRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dpe.UpdateWorkerStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 running_task_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->running_task_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dpe.UpdateWorkerStatusRequest)
  return target;
}

size_t UpdateWorkerStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dpe.UpdateWorkerStatusRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // optional int64 running_task_id = 1;
  if (has_running_task_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->running_task_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateWorkerStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dpe.UpdateWorkerStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateWorkerStatusRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateWorkerStatusRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dpe.UpdateWorkerStatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dpe.UpdateWorkerStatusRequest)
    MergeFrom(*source);
  }
}

void UpdateWorkerStatusRequest::MergeFrom(const UpdateWorkerStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dpe.UpdateWorkerStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_running_task_id()) {
    set_running_task_id(from.running_task_id());
  }
}

void UpdateWorkerStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dpe.UpdateWorkerStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateWorkerStatusRequest::CopyFrom(const UpdateWorkerStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dpe.UpdateWorkerStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateWorkerStatusRequest::IsInitialized() const {
  return true;
}

void UpdateWorkerStatusRequest::Swap(UpdateWorkerStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateWorkerStatusRequest::InternalSwap(UpdateWorkerStatusRequest* other) {
  std::swap(running_task_id_, other->running_task_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateWorkerStatusRequest::GetMetadata() const {
  protobuf_dpe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dpe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpdateWorkerStatusRequest

// optional int64 running_task_id = 1;
bool UpdateWorkerStatusRequest::has_running_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpdateWorkerStatusRequest::set_has_running_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UpdateWorkerStatusRequest::clear_has_running_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpdateWorkerStatusRequest::clear_running_task_id() {
  running_task_id_ = GOOGLE_LONGLONG(0);
  clear_has_running_task_id();
}
::google::protobuf::int64 UpdateWorkerStatusRequest::running_task_id() const {
  // @@protoc_insertion_point(field_get:dpe.UpdateWorkerStatusRequest.running_task_id)
  return running_task_id_;
}
void UpdateWorkerStatusRequest::set_running_task_id(::google::protobuf::int64 value) {
  set_has_running_task_id();
  running_task_id_ = value;
  // @@protoc_insertion_point(field_set:dpe.UpdateWorkerStatusRequest.running_task_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kNameFieldNumber;
const int Request::kConnectionIdFieldNumber;
const int Request::kRequestIdFieldNumber;
const int Request::kTimestampFieldNumber;
const int Request::kConnectFieldNumber;
const int Request::kDisconnectFieldNumber;
const int Request::kComputeFieldNumber;
const int Request::kFinishComputeFieldNumber;
const int Request::kUpdateWorkerStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dpe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dpe.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_connect()) {
    connect_ = new ::dpe::ConnectRequest(*from.connect_);
  } else {
    connect_ = NULL;
  }
  if (from.has_disconnect()) {
    disconnect_ = new ::dpe::DisconnectRequest(*from.disconnect_);
  } else {
    disconnect_ = NULL;
  }
  if (from.has_compute()) {
    compute_ = new ::dpe::ComputeRequest(*from.compute_);
  } else {
    compute_ = NULL;
  }
  if (from.has_finish_compute()) {
    finish_compute_ = new ::dpe::FinishComputeRequest(*from.finish_compute_);
  } else {
    finish_compute_ = NULL;
  }
  if (from.has_update_worker_status()) {
    update_worker_status_ = new ::dpe::UpdateWorkerStatusRequest(*from.update_worker_status_);
  } else {
    update_worker_status_ = NULL;
  }
  ::memcpy(&connection_id_, &from.connection_id_,
    reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&connection_id_) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:dpe.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&connect_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&connect_) + sizeof(timestamp_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:dpe.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete connect_;
  }
  if (this != internal_default_instance()) {
    delete disconnect_;
  }
  if (this != internal_default_instance()) {
    delete compute_;
  }
  if (this != internal_default_instance()) {
    delete finish_compute_;
  }
  if (this != internal_default_instance()) {
    delete update_worker_status_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_dpe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dpe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Request& Request::default_instance() {
  protobuf_dpe_2eproto::InitDefaults();
  return *internal_default_instance();
}

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:dpe.Request)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_connect()) {
      GOOGLE_DCHECK(connect_ != NULL);
      connect_->::dpe::ConnectRequest::Clear();
    }
    if (has_disconnect()) {
      GOOGLE_DCHECK(disconnect_ != NULL);
      disconnect_->::dpe::DisconnectRequest::Clear();
    }
    if (has_compute()) {
      GOOGLE_DCHECK(compute_ != NULL);
      compute_->::dpe::ComputeRequest::Clear();
    }
    if (has_finish_compute()) {
      GOOGLE_DCHECK(finish_compute_ != NULL);
      finish_compute_->::dpe::FinishComputeRequest::Clear();
    }
    if (has_update_worker_status()) {
      GOOGLE_DCHECK(update_worker_status_ != NULL);
      update_worker_status_->::dpe::UpdateWorkerStatusRequest::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&connection_id_, 0, reinterpret_cast<char*>(&request_id_) -
      reinterpret_cast<char*>(&connection_id_) + sizeof(request_id_));
  }
  timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dpe.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dpe.Request.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 connection_id = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_connection_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &connection_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_id = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 100 [default = 0];
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(800u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dpe.ConnectRequest connect = 300;
      case 300: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2402u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dpe.DisconnectRequest disconnect = 301;
      case 301: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2410u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disconnect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dpe.ComputeRequest compute = 302;
      case 302: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2418u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dpe.FinishComputeRequest finish_compute = 303;
      case 303: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2426u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_finish_compute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dpe.UpdateWorkerStatusRequest update_worker_status = 304;
      case 304: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2434u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_worker_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dpe.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dpe.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dpe.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dpe.Request.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int64 connection_id = 2 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->connection_id(), output);
  }

  // optional int64 request_id = 3 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->request_id(), output);
  }

  // optional int64 timestamp = 100 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(100, this->timestamp(), output);
  }

  // optional .dpe.ConnectRequest connect = 300;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      300, *this->connect_, output);
  }

  // optional .dpe.DisconnectRequest disconnect = 301;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      301, *this->disconnect_, output);
  }

  // optional .dpe.ComputeRequest compute = 302;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      302, *this->compute_, output);
  }

  // optional .dpe.FinishComputeRequest finish_compute = 303;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      303, *this->finish_compute_, output);
  }

  // optional .dpe.UpdateWorkerStatusRequest update_worker_status = 304;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      304, *this->update_worker_status_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dpe.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dpe.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dpe.Request.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int64 connection_id = 2 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->connection_id(), target);
  }

  // optional int64 request_id = 3 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->request_id(), target);
  }

  // optional int64 timestamp = 100 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(100, this->timestamp(), target);
  }

  // optional .dpe.ConnectRequest connect = 300;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        300, *this->connect_, deterministic, target);
  }

  // optional .dpe.DisconnectRequest disconnect = 301;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        301, *this->disconnect_, deterministic, target);
  }

  // optional .dpe.ComputeRequest compute = 302;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        302, *this->compute_, deterministic, target);
  }

  // optional .dpe.FinishComputeRequest finish_compute = 303;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        303, *this->finish_compute_, deterministic, target);
  }

  // optional .dpe.UpdateWorkerStatusRequest update_worker_status = 304;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        304, *this->update_worker_status_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dpe.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dpe.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .dpe.ConnectRequest connect = 300;
    if (has_connect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->connect_);
    }

    // optional .dpe.DisconnectRequest disconnect = 301;
    if (has_disconnect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->disconnect_);
    }

    // optional .dpe.ComputeRequest compute = 302;
    if (has_compute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->compute_);
    }

    // optional .dpe.FinishComputeRequest finish_compute = 303;
    if (has_finish_compute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->finish_compute_);
    }

    // optional .dpe.UpdateWorkerStatusRequest update_worker_status = 304;
    if (has_update_worker_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->update_worker_status_);
    }

    // optional int64 connection_id = 2 [default = 0];
    if (has_connection_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->connection_id());
    }

    // optional int64 request_id = 3 [default = 0];
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_id());
    }

  }
  // optional int64 timestamp = 100 [default = 0];
  if (has_timestamp()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dpe.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dpe.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dpe.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dpe.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_connect()->::dpe::ConnectRequest::MergeFrom(from.connect());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_disconnect()->::dpe::DisconnectRequest::MergeFrom(from.disconnect());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_compute()->::dpe::ComputeRequest::MergeFrom(from.compute());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_finish_compute()->::dpe::FinishComputeRequest::MergeFrom(from.finish_compute());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_update_worker_status()->::dpe::UpdateWorkerStatusRequest::MergeFrom(from.update_worker_status());
    }
    if (cached_has_bits & 0x00000040u) {
      connection_id_ = from.connection_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      request_id_ = from.request_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_timestamp(from.timestamp());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dpe.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dpe.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  name_.Swap(&other->name_);
  std::swap(connect_, other->connect_);
  std::swap(disconnect_, other->disconnect_);
  std::swap(compute_, other->compute_);
  std::swap(finish_compute_, other->finish_compute_);
  std::swap(update_worker_status_, other->update_worker_status_);
  std::swap(connection_id_, other->connection_id_);
  std::swap(request_id_, other->request_id_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_dpe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dpe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional string name = 1;
bool Request::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Request::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Request::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Request::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Request::name() const {
  // @@protoc_insertion_point(field_get:dpe.Request.name)
  return name_.GetNoArena();
}
void Request::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dpe.Request.name)
}
#if LANG_CXX11
void Request::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dpe.Request.name)
}
#endif
void Request::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dpe.Request.name)
}
void Request::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dpe.Request.name)
}
::std::string* Request::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:dpe.Request.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Request::release_name() {
  // @@protoc_insertion_point(field_release:dpe.Request.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Request::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dpe.Request.name)
}

// optional int64 connection_id = 2 [default = 0];
bool Request::has_connection_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Request::set_has_connection_id() {
  _has_bits_[0] |= 0x00000040u;
}
void Request::clear_has_connection_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void Request::clear_connection_id() {
  connection_id_ = GOOGLE_LONGLONG(0);
  clear_has_connection_id();
}
::google::protobuf::int64 Request::connection_id() const {
  // @@protoc_insertion_point(field_get:dpe.Request.connection_id)
  return connection_id_;
}
void Request::set_connection_id(::google::protobuf::int64 value) {
  set_has_connection_id();
  connection_id_ = value;
  // @@protoc_insertion_point(field_set:dpe.Request.connection_id)
}

// optional int64 request_id = 3 [default = 0];
bool Request::has_request_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Request::set_has_request_id() {
  _has_bits_[0] |= 0x00000080u;
}
void Request::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000080u;
}
void Request::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
  clear_has_request_id();
}
::google::protobuf::int64 Request::request_id() const {
  // @@protoc_insertion_point(field_get:dpe.Request.request_id)
  return request_id_;
}
void Request::set_request_id(::google::protobuf::int64 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:dpe.Request.request_id)
}

// optional int64 timestamp = 100 [default = 0];
bool Request::has_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Request::set_has_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
void Request::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
void Request::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 Request::timestamp() const {
  // @@protoc_insertion_point(field_get:dpe.Request.timestamp)
  return timestamp_;
}
void Request::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:dpe.Request.timestamp)
}

// optional .dpe.ConnectRequest connect = 300;
bool Request::has_connect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Request::set_has_connect() {
  _has_bits_[0] |= 0x00000002u;
}
void Request::clear_has_connect() {
  _has_bits_[0] &= ~0x00000002u;
}
void Request::clear_connect() {
  if (connect_ != NULL) connect_->::dpe::ConnectRequest::Clear();
  clear_has_connect();
}
const ::dpe::ConnectRequest& Request::connect() const {
  // @@protoc_insertion_point(field_get:dpe.Request.connect)
  return connect_ != NULL ? *connect_
                         : *::dpe::ConnectRequest::internal_default_instance();
}
::dpe::ConnectRequest* Request::mutable_connect() {
  set_has_connect();
  if (connect_ == NULL) {
    connect_ = new ::dpe::ConnectRequest;
  }
  // @@protoc_insertion_point(field_mutable:dpe.Request.connect)
  return connect_;
}
::dpe::ConnectRequest* Request::release_connect() {
  // @@protoc_insertion_point(field_release:dpe.Request.connect)
  clear_has_connect();
  ::dpe::ConnectRequest* temp = connect_;
  connect_ = NULL;
  return temp;
}
void Request::set_allocated_connect(::dpe::ConnectRequest* connect) {
  delete connect_;
  connect_ = connect;
  if (connect) {
    set_has_connect();
  } else {
    clear_has_connect();
  }
  // @@protoc_insertion_point(field_set_allocated:dpe.Request.connect)
}

// optional .dpe.DisconnectRequest disconnect = 301;
bool Request::has_disconnect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Request::set_has_disconnect() {
  _has_bits_[0] |= 0x00000004u;
}
void Request::clear_has_disconnect() {
  _has_bits_[0] &= ~0x00000004u;
}
void Request::clear_disconnect() {
  if (disconnect_ != NULL) disconnect_->::dpe::DisconnectRequest::Clear();
  clear_has_disconnect();
}
const ::dpe::DisconnectRequest& Request::disconnect() const {
  // @@protoc_insertion_point(field_get:dpe.Request.disconnect)
  return disconnect_ != NULL ? *disconnect_
                         : *::dpe::DisconnectRequest::internal_default_instance();
}
::dpe::DisconnectRequest* Request::mutable_disconnect() {
  set_has_disconnect();
  if (disconnect_ == NULL) {
    disconnect_ = new ::dpe::DisconnectRequest;
  }
  // @@protoc_insertion_point(field_mutable:dpe.Request.disconnect)
  return disconnect_;
}
::dpe::DisconnectRequest* Request::release_disconnect() {
  // @@protoc_insertion_point(field_release:dpe.Request.disconnect)
  clear_has_disconnect();
  ::dpe::DisconnectRequest* temp = disconnect_;
  disconnect_ = NULL;
  return temp;
}
void Request::set_allocated_disconnect(::dpe::DisconnectRequest* disconnect) {
  delete disconnect_;
  disconnect_ = disconnect;
  if (disconnect) {
    set_has_disconnect();
  } else {
    clear_has_disconnect();
  }
  // @@protoc_insertion_point(field_set_allocated:dpe.Request.disconnect)
}

// optional .dpe.ComputeRequest compute = 302;
bool Request::has_compute() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Request::set_has_compute() {
  _has_bits_[0] |= 0x00000008u;
}
void Request::clear_has_compute() {
  _has_bits_[0] &= ~0x00000008u;
}
void Request::clear_compute() {
  if (compute_ != NULL) compute_->::dpe::ComputeRequest::Clear();
  clear_has_compute();
}
const ::dpe::ComputeRequest& Request::compute() const {
  // @@protoc_insertion_point(field_get:dpe.Request.compute)
  return compute_ != NULL ? *compute_
                         : *::dpe::ComputeRequest::internal_default_instance();
}
::dpe::ComputeRequest* Request::mutable_compute() {
  set_has_compute();
  if (compute_ == NULL) {
    compute_ = new ::dpe::ComputeRequest;
  }
  // @@protoc_insertion_point(field_mutable:dpe.Request.compute)
  return compute_;
}
::dpe::ComputeRequest* Request::release_compute() {
  // @@protoc_insertion_point(field_release:dpe.Request.compute)
  clear_has_compute();
  ::dpe::ComputeRequest* temp = compute_;
  compute_ = NULL;
  return temp;
}
void Request::set_allocated_compute(::dpe::ComputeRequest* compute) {
  delete compute_;
  compute_ = compute;
  if (compute) {
    set_has_compute();
  } else {
    clear_has_compute();
  }
  // @@protoc_insertion_point(field_set_allocated:dpe.Request.compute)
}

// optional .dpe.FinishComputeRequest finish_compute = 303;
bool Request::has_finish_compute() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Request::set_has_finish_compute() {
  _has_bits_[0] |= 0x00000010u;
}
void Request::clear_has_finish_compute() {
  _has_bits_[0] &= ~0x00000010u;
}
void Request::clear_finish_compute() {
  if (finish_compute_ != NULL) finish_compute_->::dpe::FinishComputeRequest::Clear();
  clear_has_finish_compute();
}
const ::dpe::FinishComputeRequest& Request::finish_compute() const {
  // @@protoc_insertion_point(field_get:dpe.Request.finish_compute)
  return finish_compute_ != NULL ? *finish_compute_
                         : *::dpe::FinishComputeRequest::internal_default_instance();
}
::dpe::FinishComputeRequest* Request::mutable_finish_compute() {
  set_has_finish_compute();
  if (finish_compute_ == NULL) {
    finish_compute_ = new ::dpe::FinishComputeRequest;
  }
  // @@protoc_insertion_point(field_mutable:dpe.Request.finish_compute)
  return finish_compute_;
}
::dpe::FinishComputeRequest* Request::release_finish_compute() {
  // @@protoc_insertion_point(field_release:dpe.Request.finish_compute)
  clear_has_finish_compute();
  ::dpe::FinishComputeRequest* temp = finish_compute_;
  finish_compute_ = NULL;
  return temp;
}
void Request::set_allocated_finish_compute(::dpe::FinishComputeRequest* finish_compute) {
  delete finish_compute_;
  finish_compute_ = finish_compute;
  if (finish_compute) {
    set_has_finish_compute();
  } else {
    clear_has_finish_compute();
  }
  // @@protoc_insertion_point(field_set_allocated:dpe.Request.finish_compute)
}

// optional .dpe.UpdateWorkerStatusRequest update_worker_status = 304;
bool Request::has_update_worker_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Request::set_has_update_worker_status() {
  _has_bits_[0] |= 0x00000020u;
}
void Request::clear_has_update_worker_status() {
  _has_bits_[0] &= ~0x00000020u;
}
void Request::clear_update_worker_status() {
  if (update_worker_status_ != NULL) update_worker_status_->::dpe::UpdateWorkerStatusRequest::Clear();
  clear_has_update_worker_status();
}
const ::dpe::UpdateWorkerStatusRequest& Request::update_worker_status() const {
  // @@protoc_insertion_point(field_get:dpe.Request.update_worker_status)
  return update_worker_status_ != NULL ? *update_worker_status_
                         : *::dpe::UpdateWorkerStatusRequest::internal_default_instance();
}
::dpe::UpdateWorkerStatusRequest* Request::mutable_update_worker_status() {
  set_has_update_worker_status();
  if (update_worker_status_ == NULL) {
    update_worker_status_ = new ::dpe::UpdateWorkerStatusRequest;
  }
  // @@protoc_insertion_point(field_mutable:dpe.Request.update_worker_status)
  return update_worker_status_;
}
::dpe::UpdateWorkerStatusRequest* Request::release_update_worker_status() {
  // @@protoc_insertion_point(field_release:dpe.Request.update_worker_status)
  clear_has_update_worker_status();
  ::dpe::UpdateWorkerStatusRequest* temp = update_worker_status_;
  update_worker_status_ = NULL;
  return temp;
}
void Request::set_allocated_update_worker_status(::dpe::UpdateWorkerStatusRequest* update_worker_status) {
  delete update_worker_status_;
  update_worker_status_ = update_worker_status;
  if (update_worker_status) {
    set_has_update_worker_status();
  } else {
    clear_has_update_worker_status();
  }
  // @@protoc_insertion_point(field_set_allocated:dpe.Request.update_worker_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kNameFieldNumber;
const int Response::kErrorCodeFieldNumber;
const int Response::kTimestampFieldNumber;
const int Response::kRequestTimestampFieldNumber;
const int Response::kRequestIdFieldNumber;
const int Response::kConnectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dpe_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dpe.Response)
}
Response::Response(const Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_connect()) {
    connect_ = new ::dpe::ConnectResponse(*from.connect_);
  } else {
    connect_ = NULL;
  }
  ::memcpy(&error_code_, &from.error_code_,
    reinterpret_cast<char*>(&request_id_) -
    reinterpret_cast<char*>(&error_code_) + sizeof(request_id_));
  // @@protoc_insertion_point(copy_constructor:dpe.Response)
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&connect_, 0, reinterpret_cast<char*>(&request_id_) -
    reinterpret_cast<char*>(&connect_) + sizeof(request_id_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:dpe.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete connect_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_dpe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dpe_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Response& Response::default_instance() {
  protobuf_dpe_2eproto::InitDefaults();
  return *internal_default_instance();
}

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:dpe.Response)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_connect()) {
      GOOGLE_DCHECK(connect_ != NULL);
      connect_->::dpe::ConnectResponse::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 60u) {
    ::memset(&error_code_, 0, reinterpret_cast<char*>(&request_id_) -
      reinterpret_cast<char*>(&error_code_) + sizeof(request_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dpe.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dpe.Response.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 error_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_error_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 timestamp = 100 [default = 0];
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(800u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_timestamp = 200 [default = 0];
      case 200: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1600u)) {
          set_has_request_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 request_id = 201 [default = 0];
      case 201: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(1608u)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dpe.ConnectResponse connect = 300;
      case 300: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(2402u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dpe.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dpe.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dpe.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dpe.Response.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int64 error_code = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->error_code(), output);
  }

  // optional int64 timestamp = 100 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(100, this->timestamp(), output);
  }

  // optional int64 request_timestamp = 200 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(200, this->request_timestamp(), output);
  }

  // optional int64 request_id = 201 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(201, this->request_id(), output);
  }

  // optional .dpe.ConnectResponse connect = 300;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      300, *this->connect_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dpe.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dpe.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dpe.Response.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int64 error_code = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->error_code(), target);
  }

  // optional int64 timestamp = 100 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(100, this->timestamp(), target);
  }

  // optional int64 request_timestamp = 200 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(200, this->request_timestamp(), target);
  }

  // optional int64 request_id = 201 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(201, this->request_id(), target);
  }

  // optional .dpe.ConnectResponse connect = 300;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        300, *this->connect_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dpe.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dpe.Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .dpe.ConnectResponse connect = 300;
    if (has_connect()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->connect_);
    }

    // optional int64 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->error_code());
    }

    // optional int64 timestamp = 100 [default = 0];
    if (has_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional int64 request_timestamp = 200 [default = 0];
    if (has_request_timestamp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_timestamp());
    }

    // optional int64 request_id = 201 [default = 0];
    if (has_request_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->request_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dpe.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dpe.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dpe.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dpe.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_connect()->::dpe::ConnectResponse::MergeFrom(from.connect());
    }
    if (cached_has_bits & 0x00000004u) {
      error_code_ = from.error_code_;
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      request_timestamp_ = from.request_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      request_id_ = from.request_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dpe.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dpe.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  name_.Swap(&other->name_);
  std::swap(connect_, other->connect_);
  std::swap(error_code_, other->error_code_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(request_timestamp_, other->request_timestamp_);
  std::swap(request_id_, other->request_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_dpe_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dpe_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional string name = 1;
bool Response::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Response::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Response::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Response::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Response::name() const {
  // @@protoc_insertion_point(field_get:dpe.Response.name)
  return name_.GetNoArena();
}
void Response::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dpe.Response.name)
}
#if LANG_CXX11
void Response::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dpe.Response.name)
}
#endif
void Response::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dpe.Response.name)
}
void Response::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dpe.Response.name)
}
::std::string* Response::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:dpe.Response.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Response::release_name() {
  // @@protoc_insertion_point(field_release:dpe.Response.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Response::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dpe.Response.name)
}

// optional int64 error_code = 2;
bool Response::has_error_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Response::set_has_error_code() {
  _has_bits_[0] |= 0x00000004u;
}
void Response::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void Response::clear_error_code() {
  error_code_ = GOOGLE_LONGLONG(0);
  clear_has_error_code();
}
::google::protobuf::int64 Response::error_code() const {
  // @@protoc_insertion_point(field_get:dpe.Response.error_code)
  return error_code_;
}
void Response::set_error_code(::google::protobuf::int64 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:dpe.Response.error_code)
}

// optional int64 timestamp = 100 [default = 0];
bool Response::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Response::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void Response::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void Response::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 Response::timestamp() const {
  // @@protoc_insertion_point(field_get:dpe.Response.timestamp)
  return timestamp_;
}
void Response::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:dpe.Response.timestamp)
}

// optional int64 request_timestamp = 200 [default = 0];
bool Response::has_request_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Response::set_has_request_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
void Response::clear_has_request_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void Response::clear_request_timestamp() {
  request_timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_request_timestamp();
}
::google::protobuf::int64 Response::request_timestamp() const {
  // @@protoc_insertion_point(field_get:dpe.Response.request_timestamp)
  return request_timestamp_;
}
void Response::set_request_timestamp(::google::protobuf::int64 value) {
  set_has_request_timestamp();
  request_timestamp_ = value;
  // @@protoc_insertion_point(field_set:dpe.Response.request_timestamp)
}

// optional int64 request_id = 201 [default = 0];
bool Response::has_request_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Response::set_has_request_id() {
  _has_bits_[0] |= 0x00000020u;
}
void Response::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void Response::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
  clear_has_request_id();
}
::google::protobuf::int64 Response::request_id() const {
  // @@protoc_insertion_point(field_get:dpe.Response.request_id)
  return request_id_;
}
void Response::set_request_id(::google::protobuf::int64 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:dpe.Response.request_id)
}

// optional .dpe.ConnectResponse connect = 300;
bool Response::has_connect() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Response::set_has_connect() {
  _has_bits_[0] |= 0x00000002u;
}
void Response::clear_has_connect() {
  _has_bits_[0] &= ~0x00000002u;
}
void Response::clear_connect() {
  if (connect_ != NULL) connect_->::dpe::ConnectResponse::Clear();
  clear_has_connect();
}
const ::dpe::ConnectResponse& Response::connect() const {
  // @@protoc_insertion_point(field_get:dpe.Response.connect)
  return connect_ != NULL ? *connect_
                         : *::dpe::ConnectResponse::internal_default_instance();
}
::dpe::ConnectResponse* Response::mutable_connect() {
  set_has_connect();
  if (connect_ == NULL) {
    connect_ = new ::dpe::ConnectResponse;
  }
  // @@protoc_insertion_point(field_mutable:dpe.Response.connect)
  return connect_;
}
::dpe::ConnectResponse* Response::release_connect() {
  // @@protoc_insertion_point(field_release:dpe.Response.connect)
  clear_has_connect();
  ::dpe::ConnectResponse* temp = connect_;
  connect_ = NULL;
  return temp;
}
void Response::set_allocated_connect(::dpe::ConnectResponse* connect) {
  delete connect_;
  connect_ = connect;
  if (connect) {
    set_has_connect();
  } else {
    clear_has_connect();
  }
  // @@protoc_insertion_point(field_set_allocated:dpe.Response.connect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dpe

// @@protoc_insertion_point(global_scope)
